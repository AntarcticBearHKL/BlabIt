{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["file://D%3A/BlabIt/front_end/next_app/components/audio_recorder.tsx"],"sourcesContent":["import { useState, useRef } from 'react';\r\n\r\nexport const useAudioRecorder = () => {\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [audioBlob, setAudioBlob] = useState<Blob | null>(null);\r\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\r\n  const chunksRef = useRef<Blob[]>([]);\r\n\r\n  const startRecording = async () => {\r\n    try {\r\n      setIsRecording(true);\r\n      // 添加 iOS Safari 所需的约束\r\n      const stream = await navigator.mediaDevices.getUserMedia({\r\n        audio: {\r\n          echoCancellation: true,\r\n          noiseSuppression: true,\r\n          autoGainControl: true,\r\n          sampleRate: 44100,\r\n          channelCount: 1\r\n        }\r\n      });\r\n\r\n      // 检查浏览器支持的 MIME 类型\r\n      const mimeType = [\r\n        'audio/webm',\r\n        'audio/mp4',\r\n        'audio/aac',\r\n        'audio/ogg'\r\n      ].find(type => MediaRecorder.isTypeSupported(type)) || 'audio/webm';\r\n\r\n      mediaRecorderRef.current = new MediaRecorder(stream, {\r\n        mimeType,\r\n        audioBitsPerSecond: 128000\r\n      });\r\n      \r\n      // 设置较小的时间片，提高兼容性\r\n      mediaRecorderRef.current.ondataavailable = (event) => {\r\n        if (event.data.size > 0) {\r\n          chunksRef.current.push(event.data);\r\n        }\r\n      };\r\n\r\n      mediaRecorderRef.current.onstop = () => {\r\n        try {\r\n          if (chunksRef.current.length > 0) {\r\n            const blob = new Blob(chunksRef.current, { type: mimeType });\r\n            setAudioBlob(blob);\r\n          } else {\r\n            console.warn('No audio data chunks were collected during recording');\r\n          }\r\n          chunksRef.current = [];\r\n        } catch (error) {\r\n          console.error('Error creating audio blob:', error);\r\n        }\r\n      };\r\n\r\n      // 每秒收集一次数据，避免内存问题\r\n      mediaRecorderRef.current.start(1000);\r\n    } catch (error) {\r\n      console.error('Error accessing microphone:', error);\r\n      setIsRecording(false);\r\n      // 添加更详细的错误处理\r\n      if (error instanceof DOMException) {\r\n        if (error.name === 'NotAllowedError') {\r\n          alert('请允许访问麦克风权限');\r\n        } else if (error.name === 'NotFoundError') {\r\n          alert('未找到录音设备');\r\n        } else {\r\n          alert('录音初始化失败，请检查设备权限');\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const stopRecording = () => {\r\n    return new Promise<Blob | null>((resolve) => {\r\n      if (mediaRecorderRef.current && isRecording) {\r\n        try {\r\n          setIsRecording(false);\r\n          \r\n          mediaRecorderRef.current.onstop = () => {\r\n            try {\r\n              if (chunksRef.current.length > 0) {\r\n                const blob = new Blob(chunksRef.current, { \r\n                  type: mediaRecorderRef.current?.mimeType || 'audio/webm' \r\n                });\r\n                setAudioBlob(blob); // 更新状态\r\n                resolve(blob);      // 直接返回 blob\r\n              } else {\r\n                console.warn('No audio data chunks were collected during recording');\r\n                resolve(null);\r\n              }\r\n              chunksRef.current = [];\r\n            } catch (error) {\r\n              console.error('Error creating audio blob:', error);\r\n              resolve(null);\r\n            }\r\n          };\r\n          \r\n          mediaRecorderRef.current.stop();\r\n          mediaRecorderRef.current.stream.getTracks().forEach(track => {\r\n            track.stop();\r\n            track.enabled = false;\r\n          });\r\n        } catch (error) {\r\n          console.error('Error stopping recording:', error);\r\n          setIsRecording(false);\r\n          resolve(null);\r\n        }\r\n      } else {\r\n        resolve(null);\r\n      }\r\n    });\r\n  };\r\n\r\n  return {\r\n    isRecording,\r\n    audioBlob,\r\n    startRecording,\r\n    stopRecording\r\n  };\r\n};\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":["file://D%3A/BlabIt/front_end/next_app/components/context_section.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useRouter } from \"next/navigation\";\r\nimport { useState } from 'react';\r\nimport { useAudioRecorder } from \"./audio_recorder\";\r\nimport { setSpeechText } from '@/store/slices/speechSlice'\r\nimport { Spin } from 'antd';\r\nimport { useDispatch } from 'react-redux'\r\n\r\nconst ContextSection = () => {\r\n  const router = useRouter();\r\n  const { isRecording, startRecording, stopRecording } = useAudioRecorder();\r\n  const [isUploading, setIsUploading] = useState(false);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const handleButtonClick = async () => {\r\n    if (isRecording) {\r\n      setIsProcessing(true);\r\n      try {\r\n        // 直接从 stopRecording 获取 blob\r\n        const recordedBlob = await stopRecording();\r\n        \r\n        if (!recordedBlob) {\r\n          console.warn('No audio blob available after recording stopped');\r\n          setIsProcessing(false);\r\n          return;\r\n        }\r\n        \r\n        // 使用直接获取的 blob 进行上传，不依赖组件状态\r\n        await handleUploadWithBlob(recordedBlob);\r\n      } catch (error) {\r\n        console.error('Recording error:', error);\r\n      } finally {\r\n        setIsProcessing(false);\r\n      }\r\n    } else {\r\n      startRecording();\r\n    }\r\n  };\r\n\r\n  // 新增一个函数，直接使用传入的 blob\r\n  const handleUploadWithBlob = async (blob: Blob) => {\r\n    try {\r\n      setIsUploading(true);\r\n      const formData = new FormData();\r\n      formData.append('audio', blob, 'recording.webm');\r\n\r\n      const response = await fetch('https://blabit.xyz/transcribe', {\r\n        method: 'POST',\r\n        body: formData,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Upload failed');\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('Upload successful:', data);\r\n      \r\n      dispatch(setSpeechText(data.text));\r\n      router.push('/context');\r\n    } catch (error) {\r\n      console.error('Error uploading audio:', error);\r\n    } finally {\r\n      setIsUploading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div \r\n      className=\"flex flex-col items-center justify-center min-h-screen bg-[rgb(183,198,175)] p-0 relative\"\r\n    >\r\n      {/* 全屏加载动画 */}\r\n      {isUploading && (\r\n        <div className=\"fixed inset-0 flex items-center justify-center bg-[rgba(183,198,175,0.8)] z-50\">\r\n          <Spin \r\n            size=\"large\" \r\n            tip=\"Processing...\" \r\n            style={{ \r\n              color: '#8B4513',\r\n            }}\r\n            fullscreen \r\n          />\r\n        </div>\r\n      )}\r\n\r\n      {/* 内容容器 - 添加最大宽度并居中 */}\r\n      <div className=\"w-full max-w-[800px] mx-auto relative h-full min-h-screen\">\r\n        {/* 图片层 - 使用绝对定位作为背景 */}\r\n        <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 opacity-70 z-0 w-4/5\">\r\n          <div className=\"w-full\">\r\n            <img\r\n              src=\"/images/1.jpg\"\r\n              alt=\"Context Whisperer Logo\"\r\n              className=\"rounded-lg shadow-md object-cover w-full h-auto\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {/* 重新排版的文字层 */}\r\n        <div className=\"absolute z-10 flex flex-col h-full w-full px-8\">\r\n          {/* The Context */}\r\n          <div className=\"h-[13%] flex items-end pt-8 pl-8\">\r\n            <h1 className=\"text-2xl sm:text-3xl md:text-4xl font-bold text-gray-600\">\r\n              The Context\r\n            </h1>\r\n          </div>\r\n          \r\n          {/* Whisperer */}\r\n          <div className=\"h-[5%] flex justify-center items-center\">\r\n            <h1 className=\"text-4xl sm:text-5xl md:text-6xl font-bold text-gray-800\">\r\n              Whisperer\r\n            </h1>\r\n          </div>\r\n          \r\n          {/* 添加填充器空间 */}\r\n          <div className=\"h-[25%]\"></div>\r\n          \r\n          {/* 新的结构：文字和按钮在同一个容器中 */}\r\n          <div className=\"h-[57%] w-full flex flex-col relative\">\r\n            {/* 玻璃效果背景 */}\r\n            <span className=\"absolute inset-0 bg-white/25 backdrop-blur-xl backdrop-filter backdrop-saturate-150 rounded-lg z-0\"></span>\r\n            \r\n            <div className=\"flex flex-col h-full p-6 pt-8 z-10 relative\">\r\n              {/* 主题文字部分 - 占据容器的65% */}\r\n              <div className=\"flex-1 min-h-0 mb-8 flex items-center\">\r\n                <p className=\"text-base sm:text-xl md:text-2xl text-gray-800 w-full text-justify\">\r\n                  Like a gentle breeze carrying the first words of spring, our context generator crafts the perfect opening lines for your conversations. It weaves together phrases and translations, helping you step confidently into any dialogue, as naturally as dawn breaks over the horizon.\r\n                </p>\r\n              </div>\r\n              \r\n              {/* 按钮部分 - 占据容器的30% */}\r\n              <div className=\"h-[30%] min-h-[60px] flex items-center justify-center px-4\">\r\n                <button\r\n                  onClick={handleButtonClick}\r\n                  disabled={isProcessing}\r\n                  className={`px-6 py-3 text-lg sm:text-xl md:text-2xl rounded-lg font-semibold select-none w-full shadow-lg flex items-center justify-center bg-black hover:bg-gray-800 text-[rgb(183,198,175)] transition-colors ${\r\n                    isProcessing ? 'opacity-50 cursor-not-allowed' : ''\r\n                  }`}\r\n                >\r\n                  {isProcessing ? 'PROCESSING...' : isRecording ? 'STOP RECORDING' : 'SET THE CONTEXT FOR ME'}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContextSection;"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAPA;;;;;;;;AASA,MAAM,iBAAiB;IACrB,MAAM,SAAS,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD;IACvB,MAAM,EAAE,WAAW,EAAE,cAAc,EAAE,aAAa,EAAE,GAAG,CAAA,GAAA,6HAAA,CAAA,mBAAgB,AAAD;IACtE,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC/C,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEjD,MAAM,WAAW,CAAA,GAAA,yJAAA,CAAA,cAAW,AAAD;IAE3B,MAAM,oBAAoB;QACxB,IAAI,aAAa;YACf,gBAAgB;YAChB,IAAI;gBACF,4BAA4B;gBAC5B,MAAM,eAAe,MAAM;gBAE3B,IAAI,CAAC,cAAc;oBACjB,QAAQ,IAAI,CAAC;oBACb,gBAAgB;oBAChB;gBACF;gBAEA,4BAA4B;gBAC5B,MAAM,qBAAqB;YAC7B,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,oBAAoB;YACpC,SAAU;gBACR,gBAAgB;YAClB;QACF,OAAO;YACL;QACF;IACF;IAEA,sBAAsB;IACtB,MAAM,uBAAuB,OAAO;QAClC,IAAI;YACF,eAAe;YACf,MAAM,WAAW,IAAI;YACrB,SAAS,MAAM,CAAC,SAAS,MAAM;YAE/B,MAAM,WAAW,MAAM,MAAM,iCAAiC;gBAC5D,QAAQ;gBACR,MAAM;YACR;YAEA,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,MAAM,IAAI,MAAM;YAClB;YAEA,MAAM,OAAO,MAAM,SAAS,IAAI;YAChC,QAAQ,GAAG,CAAC,sBAAsB;YAElC,SAAS,CAAA,GAAA,8HAAA,CAAA,gBAAa,AAAD,EAAE,KAAK,IAAI;YAChC,OAAO,IAAI,CAAC;QACd,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,0BAA0B;QAC1C,SAAU;YACR,eAAe;QACjB;IACF;IAEA,qBACE,8OAAC;QACC,WAAU;;YAGT,6BACC,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC,8KAAA,CAAA,OAAI;oBACH,MAAK;oBACL,KAAI;oBACJ,OAAO;wBACL,OAAO;oBACT;oBACA,UAAU;;;;;;;;;;;0BAMhB,8OAAC;gBAAI,WAAU;;kCAEb,8OAAC;wBAAI,WAAU;kCACb,cAAA,8OAAC;4BAAI,WAAU;sCACb,cAAA,8OAAC;gCACC,KAAI;gCACJ,KAAI;gCACJ,WAAU;;;;;;;;;;;;;;;;kCAMhB,8OAAC;wBAAI,WAAU;;0CAEb,8OAAC;gCAAI,WAAU;0CACb,cAAA,8OAAC;oCAAG,WAAU;8CAA2D;;;;;;;;;;;0CAM3E,8OAAC;gCAAI,WAAU;0CACb,cAAA,8OAAC;oCAAG,WAAU;8CAA2D;;;;;;;;;;;0CAM3E,8OAAC;gCAAI,WAAU;;;;;;0CAGf,8OAAC;gCAAI,WAAU;;kDAEb,8OAAC;wCAAK,WAAU;;;;;;kDAEhB,8OAAC;wCAAI,WAAU;;0DAEb,8OAAC;gDAAI,WAAU;0DACb,cAAA,8OAAC;oDAAE,WAAU;8DAAqE;;;;;;;;;;;0DAMpF,8OAAC;gDAAI,WAAU;0DACb,cAAA,8OAAC;oDACC,SAAS;oDACT,UAAU;oDACV,WAAW,CAAC,qMAAqM,EAC/M,eAAe,kCAAkC,IACjD;8DAED,eAAe,kBAAkB,cAAc,mBAAmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASrF;uCAEe","debugId":null}},
    {"offset": {"line": 394, "column": 0}, "map": {"version":3,"sources":["file://D%3A/BlabIt/front_end/next_app/components/enchanter_section.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useRouter } from \"next/navigation\";\r\nimport { useState } from 'react';\r\nimport { useAudioRecorder } from \"./audio_recorder\";\r\nimport { setSpeechText } from '@/store/slices/speechSlice'\r\nimport { Spin } from 'antd';\r\nimport { useDispatch } from 'react-redux'\r\n\r\nconst EnchanterSection = () => {\r\n  const router = useRouter();\r\n  const { isRecording, startRecording, stopRecording } = useAudioRecorder();\r\n  const [isUploading, setIsUploading] = useState(false);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const handleButtonClick = async () => {\r\n    if (isRecording) {\r\n      setIsProcessing(true);\r\n      try {\r\n        // 直接从 stopRecording 获取 blob\r\n        const recordedBlob = await stopRecording();\r\n        \r\n        if (!recordedBlob) {\r\n          console.warn('No audio blob available after recording stopped');\r\n          setIsProcessing(false);\r\n          return;\r\n        }\r\n        \r\n        // 使用直接获取的 blob 进行上传，不依赖组件状态\r\n        await handleUploadWithBlob(recordedBlob);\r\n      } catch (error) {\r\n        console.error('Recording error:', error);\r\n      } finally {\r\n        setIsProcessing(false);\r\n      }\r\n    } else {\r\n      startRecording();\r\n    }\r\n  };\r\n\r\n  // 新增一个函数，直接使用传入的 blob\r\n  const handleUploadWithBlob = async (blob: Blob) => {\r\n    try {\r\n      setIsUploading(true);\r\n      const formData = new FormData();\r\n      formData.append('audio', blob, 'recording.webm');\r\n\r\n      const response = await fetch('https://blabit.xyz/transcribe', {\r\n        method: 'POST',\r\n        body: formData,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Upload failed');\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('Upload successful:', data);\r\n      \r\n      dispatch(setSpeechText(data.text));\r\n      router.push('/enchanter');\r\n    } catch (error) {\r\n      console.error('Error uploading audio:', error);\r\n    } finally {\r\n      setIsUploading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div \r\n      className=\"flex flex-col items-center justify-center min-h-screen bg-[rgb(181,180,162)] p-0 relative\"\r\n    >\r\n      {/* 全屏加载动画 */}\r\n      {isUploading && (\r\n        <div className=\"fixed inset-0 flex items-center justify-center bg-[rgba(181,180,162,0.8)] z-50\">\r\n          <Spin \r\n            size=\"large\" \r\n            tip=\"Processing...\" \r\n            style={{ \r\n              color: '#8B4513',\r\n            }} \r\n            fullscreen \r\n          />\r\n        </div>\r\n      )}\r\n      \r\n      {/* 内容容器 - 添加最大宽度并居中 */}\r\n      <div className=\"w-full max-w-[800px] mx-auto relative h-full min-h-screen\">\r\n        {/* 图片层 - 使用绝对定位作为背景 */}\r\n        <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 opacity-70 z-0 w-4/5\">\r\n          <div className=\"w-full\">\r\n            <img\r\n              src=\"/images/2.jpg\"\r\n              alt=\"Context Whisperer Logo\"\r\n              className=\"rounded-lg shadow-md object-cover w-full h-auto\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {/* 重新排版的文字层 */}\r\n        <div className=\"absolute z-10 flex flex-col h-full w-full px-8\">\r\n          {/* The Context */}\r\n          <div className=\"h-[13%] flex items-end pt-8 pl-8\">\r\n            <h1 className=\"text-2xl sm:text-3xl md:text-4xl font-bold text-gray-600\">\r\n              English Enhancement \r\n            </h1>\r\n          </div>\r\n          \r\n          {/* Whisperer - 接下来10%, 居中 */}\r\n          <div className=\"h-[5%] flex justify-center items-center\">\r\n            <h1 className=\"text-4xl sm:text-5xl md:text-6xl font-bold text-gray-800\">\r\n              Enchanter\r\n            </h1>\r\n          </div>\r\n          \r\n          {/* 添加填充器空间 */}\r\n          <div className=\"h-[25%]\"></div>\r\n          \r\n          {/* 新的结构：文字和按钮在同一个容器中 */}\r\n          <div className=\"h-[57%] w-full flex flex-col relative\">\r\n            {/* 玻璃效果背景 */}\r\n            <span className=\"absolute inset-0 bg-white/25 backdrop-blur-xl backdrop-filter backdrop-saturate-150 rounded-lg z-0\"></span>\r\n            \r\n            <div className=\"flex flex-col h-full p-6 pt-8 z-10 relative\">\r\n              {/* 主题文字部分 - 占据容器的65% */}\r\n              <div className=\"flex-1 min-h-0 mb-8 flex items-center\">\r\n                <p className=\"text-base sm:text-xl md:text-2xl text-gray-800 w-full text-justify\">\r\n                  Your words are precious gems that deserve to shine their brightest. Let us polish them to perfection, revealing their true native brilliance. Grammar, vocabulary, and structure blend together in harmony, as we craft expressions that flow as smoothly as a mountain stream.\r\n                </p>\r\n              </div>\r\n              \r\n              {/* 按钮部分 - 占据容器的30% */}\r\n              <div className=\"h-[30%] min-h-[60px] flex items-center justify-center px-4\">\r\n                <button\r\n                  onClick={handleButtonClick}\r\n                  disabled={isProcessing}\r\n                  className={`px-6 py-3 text-lg sm:text-xl md:text-2xl rounded-lg font-semibold select-none w-full shadow-lg flex items-center justify-center bg-black hover:bg-gray-800 text-[rgb(181,180,162)] transition-colors ${\r\n                    isProcessing ? 'opacity-50 cursor-not-allowed' : ''\r\n                  }`}\r\n                >\r\n                  {isProcessing ? 'PROCESSING...' : isRecording ? 'STOP RECORDING' : 'SET THE CONTEXT FOR ME'}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EnchanterSection;"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAPA;;;;;;;;AASA,MAAM,mBAAmB;IACvB,MAAM,SAAS,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD;IACvB,MAAM,EAAE,WAAW,EAAE,cAAc,EAAE,aAAa,EAAE,GAAG,CAAA,GAAA,6HAAA,CAAA,mBAAgB,AAAD;IACtE,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC/C,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEjD,MAAM,WAAW,CAAA,GAAA,yJAAA,CAAA,cAAW,AAAD;IAE3B,MAAM,oBAAoB;QACxB,IAAI,aAAa;YACf,gBAAgB;YAChB,IAAI;gBACF,4BAA4B;gBAC5B,MAAM,eAAe,MAAM;gBAE3B,IAAI,CAAC,cAAc;oBACjB,QAAQ,IAAI,CAAC;oBACb,gBAAgB;oBAChB;gBACF;gBAEA,4BAA4B;gBAC5B,MAAM,qBAAqB;YAC7B,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,oBAAoB;YACpC,SAAU;gBACR,gBAAgB;YAClB;QACF,OAAO;YACL;QACF;IACF;IAEA,sBAAsB;IACtB,MAAM,uBAAuB,OAAO;QAClC,IAAI;YACF,eAAe;YACf,MAAM,WAAW,IAAI;YACrB,SAAS,MAAM,CAAC,SAAS,MAAM;YAE/B,MAAM,WAAW,MAAM,MAAM,iCAAiC;gBAC5D,QAAQ;gBACR,MAAM;YACR;YAEA,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,MAAM,IAAI,MAAM;YAClB;YAEA,MAAM,OAAO,MAAM,SAAS,IAAI;YAChC,QAAQ,GAAG,CAAC,sBAAsB;YAElC,SAAS,CAAA,GAAA,8HAAA,CAAA,gBAAa,AAAD,EAAE,KAAK,IAAI;YAChC,OAAO,IAAI,CAAC;QACd,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,0BAA0B;QAC1C,SAAU;YACR,eAAe;QACjB;IACF;IAEA,qBACE,8OAAC;QACC,WAAU;;YAGT,6BACC,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC,8KAAA,CAAA,OAAI;oBACH,MAAK;oBACL,KAAI;oBACJ,OAAO;wBACL,OAAO;oBACT;oBACA,UAAU;;;;;;;;;;;0BAMhB,8OAAC;gBAAI,WAAU;;kCAEb,8OAAC;wBAAI,WAAU;kCACb,cAAA,8OAAC;4BAAI,WAAU;sCACb,cAAA,8OAAC;gCACC,KAAI;gCACJ,KAAI;gCACJ,WAAU;;;;;;;;;;;;;;;;kCAMhB,8OAAC;wBAAI,WAAU;;0CAEb,8OAAC;gCAAI,WAAU;0CACb,cAAA,8OAAC;oCAAG,WAAU;8CAA2D;;;;;;;;;;;0CAM3E,8OAAC;gCAAI,WAAU;0CACb,cAAA,8OAAC;oCAAG,WAAU;8CAA2D;;;;;;;;;;;0CAM3E,8OAAC;gCAAI,WAAU;;;;;;0CAGf,8OAAC;gCAAI,WAAU;;kDAEb,8OAAC;wCAAK,WAAU;;;;;;kDAEhB,8OAAC;wCAAI,WAAU;;0DAEb,8OAAC;gDAAI,WAAU;0DACb,cAAA,8OAAC;oDAAE,WAAU;8DAAqE;;;;;;;;;;;0DAMpF,8OAAC;gDAAI,WAAU;0DACb,cAAA,8OAAC;oDACC,SAAS;oDACT,UAAU;oDACV,WAAW,CAAC,qMAAqM,EAC/M,eAAe,kCAAkC,IACjD;8DAED,eAAe,kBAAkB,cAAc,mBAAmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASrF;uCAEe","debugId":null}},
    {"offset": {"line": 634, "column": 0}, "map": {"version":3,"sources":["file://D%3A/BlabIt/front_end/next_app/components/mirror_section.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useRouter } from \"next/navigation\";\r\nimport { useState } from 'react';\r\nimport { useAudioRecorder } from \"./audio_recorder\";\r\nimport { setSpeechText } from '@/store/slices/speechSlice'\r\nimport { Spin } from 'antd';\r\nimport { useDispatch } from 'react-redux'\r\n\r\nconst MirrorSection = () => {\r\n  const router = useRouter();\r\n  const { isRecording, startRecording, stopRecording } = useAudioRecorder();\r\n  const [isUploading, setIsUploading] = useState(false);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const handleButtonClick = async () => {\r\n    if (isRecording) {\r\n      setIsProcessing(true);\r\n      try {\r\n        // 直接从 stopRecording 获取 blob\r\n        const recordedBlob = await stopRecording();\r\n        \r\n        if (!recordedBlob) {\r\n          console.warn('No audio blob available after recording stopped');\r\n          setIsProcessing(false);\r\n          return;\r\n        }\r\n        \r\n        // 使用直接获取的 blob 进行上传，不依赖组件状态\r\n        await handleUploadWithBlob(recordedBlob);\r\n      } catch (error) {\r\n        console.error('Recording error:', error);\r\n      } finally {\r\n        setIsProcessing(false);\r\n      }\r\n    } else {\r\n      startRecording();\r\n    }\r\n  };\r\n\r\n  // 新增一个函数，直接使用传入的 blob\r\n  const handleUploadWithBlob = async (blob: Blob) => {\r\n    try {\r\n      setIsUploading(true);\r\n      const formData = new FormData();\r\n      formData.append('audio', blob, 'recording.webm');\r\n\r\n      const response = await fetch('https://blabit.xyz/transcribe', {\r\n        method: 'POST',\r\n        body: formData,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Upload failed');\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('Upload successful:', data);\r\n      \r\n      dispatch(setSpeechText(data.text));\r\n      router.push('/mirror');\r\n    } catch (error) {\r\n      console.error('Error uploading audio:', error);\r\n    } finally {\r\n      setIsUploading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div \r\n      className=\"flex flex-col items-center justify-center min-h-screen bg-[rgb(167,184,208)] p-0 relative\"\r\n    >\r\n      {/* 全屏加载动画 */}\r\n      {isUploading && (\r\n        <div className=\"fixed inset-0 flex items-center justify-center bg-[rgba(167,184,208,0.8)] z-50\">\r\n          <Spin \r\n            size=\"large\" \r\n            tip=\"Processing...\" \r\n            style={{ \r\n              color: '#8B4513',\r\n            }} \r\n            fullscreen\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      {/* 内容容器 - 添加最大宽度并居中 */}\r\n      <div className=\"w-full max-w-[800px] mx-auto relative h-full min-h-screen\">\r\n        {/* 图片层 - 使用绝对定位作为背景 */}\r\n        <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 opacity-70 z-0 w-4/5\">\r\n          <div className=\"w-full\">\r\n            <img\r\n              src=\"/images/3.jpg\"\r\n              alt=\"Context Whisperer Logo\"\r\n              className=\"rounded-lg shadow-md object-cover w-full h-auto\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {/* 重新排版的文字层 */}\r\n        <div className=\"absolute z-10 flex flex-col h-full w-full px-8\">\r\n          {/* The Context */}\r\n          <div className=\"h-[13%] flex items-end pt-8 pl-8\">\r\n            <h1 className=\"text-2xl sm:text-3xl md:text-4xl font-bold text-gray-600\">\r\n              Mother Tongue \r\n            </h1>\r\n          </div>\r\n          \r\n          {/* Whisperer - 接下来10%, 居中 */}\r\n          <div className=\"h-[5%] flex justify-center items-center\">\r\n            <h1 className=\"text-4xl sm:text-5xl md:text-6xl font-bold text-gray-800\">\r\n              Mirror\r\n            </h1>\r\n          </div>\r\n          \r\n          {/* 添加填充器空间 */}\r\n          <div className=\"h-[25%]\"></div>\r\n          \r\n          {/* 新的结构：文字和按钮在同一个容器中 */}\r\n          <div className=\"h-[57%] w-full flex flex-col relative\">\r\n            {/* 玻璃效果背景 */}\r\n            <span className=\"absolute inset-0 bg-white/25 backdrop-blur-xl backdrop-filter backdrop-saturate-150 rounded-lg z-0\"></span>\r\n            \r\n            <div className=\"flex flex-col h-full p-6 pt-8 z-10 relative\">\r\n              {/* 主题文字部分 - 占据容器的65% */}\r\n              <div className=\"flex-1 min-h-0 mb-8 flex items-center\">\r\n                <p className=\"text-base sm:text-xl md:text-2xl text-gray-800 w-full text-justify\">\r\n                Transform your native thoughts into elegant expressions, like watching a butterfly emerge from its chrysalis. Each translation comes adorned with crystalline clarity, while key phrases sparkle with detailed explanations - illuminating your path to understanding like stars in the night sky.\r\n                </p>\r\n              </div>\r\n              \r\n              {/* 按钮部分 - 占据容器的30% */}\r\n              <div className=\"h-[30%] min-h-[60px] flex items-center justify-center px-4\">\r\n                <button\r\n                  onClick={handleButtonClick}\r\n                  disabled={isProcessing}\r\n                  className={`px-6 py-3 text-lg sm:text-xl md:text-2xl rounded-lg font-semibold select-none w-full shadow-lg flex items-center justify-center bg-black hover:bg-gray-800 text-[rgb(167,184,208)] transition-colors ${\r\n                    isProcessing ? 'opacity-50 cursor-not-allowed' : ''\r\n                  }`}\r\n                >\r\n                  {isProcessing ? 'PROCESSING...' : isRecording ? 'STOP RECORDING' : 'SET THE CONTEXT FOR ME'}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MirrorSection;"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAPA;;;;;;;;AASA,MAAM,gBAAgB;IACpB,MAAM,SAAS,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD;IACvB,MAAM,EAAE,WAAW,EAAE,cAAc,EAAE,aAAa,EAAE,GAAG,CAAA,GAAA,6HAAA,CAAA,mBAAgB,AAAD;IACtE,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC/C,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEjD,MAAM,WAAW,CAAA,GAAA,yJAAA,CAAA,cAAW,AAAD;IAE3B,MAAM,oBAAoB;QACxB,IAAI,aAAa;YACf,gBAAgB;YAChB,IAAI;gBACF,4BAA4B;gBAC5B,MAAM,eAAe,MAAM;gBAE3B,IAAI,CAAC,cAAc;oBACjB,QAAQ,IAAI,CAAC;oBACb,gBAAgB;oBAChB;gBACF;gBAEA,4BAA4B;gBAC5B,MAAM,qBAAqB;YAC7B,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,oBAAoB;YACpC,SAAU;gBACR,gBAAgB;YAClB;QACF,OAAO;YACL;QACF;IACF;IAEA,sBAAsB;IACtB,MAAM,uBAAuB,OAAO;QAClC,IAAI;YACF,eAAe;YACf,MAAM,WAAW,IAAI;YACrB,SAAS,MAAM,CAAC,SAAS,MAAM;YAE/B,MAAM,WAAW,MAAM,MAAM,iCAAiC;gBAC5D,QAAQ;gBACR,MAAM;YACR;YAEA,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,MAAM,IAAI,MAAM;YAClB;YAEA,MAAM,OAAO,MAAM,SAAS,IAAI;YAChC,QAAQ,GAAG,CAAC,sBAAsB;YAElC,SAAS,CAAA,GAAA,8HAAA,CAAA,gBAAa,AAAD,EAAE,KAAK,IAAI;YAChC,OAAO,IAAI,CAAC;QACd,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,0BAA0B;QAC1C,SAAU;YACR,eAAe;QACjB;IACF;IAEA,qBACE,8OAAC;QACC,WAAU;;YAGT,6BACC,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC,8KAAA,CAAA,OAAI;oBACH,MAAK;oBACL,KAAI;oBACJ,OAAO;wBACL,OAAO;oBACT;oBACA,UAAU;;;;;;;;;;;0BAMhB,8OAAC;gBAAI,WAAU;;kCAEb,8OAAC;wBAAI,WAAU;kCACb,cAAA,8OAAC;4BAAI,WAAU;sCACb,cAAA,8OAAC;gCACC,KAAI;gCACJ,KAAI;gCACJ,WAAU;;;;;;;;;;;;;;;;kCAMhB,8OAAC;wBAAI,WAAU;;0CAEb,8OAAC;gCAAI,WAAU;0CACb,cAAA,8OAAC;oCAAG,WAAU;8CAA2D;;;;;;;;;;;0CAM3E,8OAAC;gCAAI,WAAU;0CACb,cAAA,8OAAC;oCAAG,WAAU;8CAA2D;;;;;;;;;;;0CAM3E,8OAAC;gCAAI,WAAU;;;;;;0CAGf,8OAAC;gCAAI,WAAU;;kDAEb,8OAAC;wCAAK,WAAU;;;;;;kDAEhB,8OAAC;wCAAI,WAAU;;0DAEb,8OAAC;gDAAI,WAAU;0DACb,cAAA,8OAAC;oDAAE,WAAU;8DAAqE;;;;;;;;;;;0DAMpF,8OAAC;gDAAI,WAAU;0DACb,cAAA,8OAAC;oDACC,SAAS;oDACT,UAAU;oDACV,WAAW,CAAC,qMAAqM,EAC/M,eAAe,kCAAkC,IACjD;8DAED,eAAe,kBAAkB,cAAc,mBAAmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASrF;uCAEe","debugId":null}},
    {"offset": {"line": 874, "column": 0}, "map": {"version":3,"sources":["file://D%3A/BlabIt/front_end/next_app/components/full_page_slider.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useState } from \"react\";\r\nimport { useSwipeable } from \"react-swipeable\";\r\nimport { Drawer, Dropdown, message } from \"antd\";\r\nimport type { MenuProps } from \"antd\";\r\n\r\nimport ContextSection from \"./context_section\";\r\nimport EnchanterSection from \"./enchanter_section\";\r\nimport MirrorSection from \"./mirror_section\";\r\n\r\n// Add CSS classes for non-selectable text\r\nconst noSelectStyles = {\r\n  WebkitUserSelect: \"none\" as const,\r\n  MozUserSelect: \"none\" as const,\r\n  msUserSelect: \"none\" as const,\r\n  userSelect: \"none\" as const,\r\n};\r\n\r\nconst FullPageSlider = () => {\r\n  const [currentPage, setCurrentPage] = useState(0);\r\n  const [drawerOpen, setDrawerOpen] = useState(false);\r\n  const [messageApi, contextHolder] = message.useMessage();\r\n\r\n  const items: MenuProps[\"items\"] = [\r\n    { key: \"en\", label: \"English\", },\r\n    { key: \"hi\", label: \"Hindi (dev)\", disabled: true },\r\n    { key: \"zh\", label: \"中文 (dev)\", disabled: true },\r\n    { key: \"ja\", label: \"日本語 (dev)\", disabled: true },\r\n    { key: \"ko\", label: \"한국어 (dev)\", disabled: true },\r\n    { key: \"vi\", label: \"Tiếng Việt (dev)\", disabled: true },\r\n  ];\r\n\r\n  const pages = [\r\n    { id: 0, content: <ContextSection /> },\r\n    { id: 1, content: <EnchanterSection /> },\r\n    { id: 2, content: <MirrorSection /> },\r\n  ];\r\n\r\n  const handleSwipe = (direction:string) => {\r\n    if (direction === \"LEFT\") {\r\n      // 向左滑动，前进到下一页\r\n      if (currentPage < pages.length - 1) {\r\n        setCurrentPage(currentPage + 1);\r\n      } else {\r\n        // 已经是最后一页，显示提示\r\n        messageApi.loading(\"More magical cards are being crafted — stay tuned for the wonder ahead!\");\r\n      }\r\n    } else if (direction === \"RIGHT\") {\r\n      // 向右滑动，回到上一页\r\n      if (currentPage > 0) {\r\n        setCurrentPage(currentPage - 1);\r\n      } else {\r\n        // 已经是第一页，显示提示\r\n        messageApi.warning(\"This page, gently turned, marks the beginning of our journey.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const handlers = useSwipeable({\r\n    onSwipedLeft: () => handleSwipe(\"LEFT\"),\r\n    onSwipedRight: () => handleSwipe(\"RIGHT\"),\r\n  });\r\n\r\n  // 处理屏幕左右区域的点击事件\r\n  const handleSideClick = (direction: string, event: React.MouseEvent) => {\r\n    handleSwipe(direction);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      {...handlers}\r\n      style={{ \r\n        display: \"flex\", \r\n        width: \"100vw\", \r\n        height: \"100dvh\", \r\n        overflow: \"hidden\", \r\n        position: \"relative\",\r\n        padding: 0, // Added explicit padding: 0\r\n        margin: 0, // Also adding margin: 0 for good measure\r\n        ...noSelectStyles // Apply the non-selectable styles here\r\n      }}\r\n    >\r\n      {contextHolder}\r\n      {/* 左侧点击区域 */}\r\n      <div \r\n        className=\"fixed left-0 top-0 w-1/4 h-full z-[5]\"\r\n        onClick={(e) => handleSideClick(\"RIGHT\", e)}\r\n        style={{ opacity: 0 }}\r\n      />\r\n      \r\n      {/* 右侧点击区域 */}\r\n      <div \r\n        className=\"fixed right-0 top-0 w-1/4 h-full z-[5]\"\r\n        onClick={(e) => handleSideClick(\"LEFT\", e)}\r\n        style={{ opacity: 0 }}\r\n      />\r\n\r\n      {/* 背景图片 */}\r\n      \r\n      {/* 顶部栏目 */}\r\n      <div className=\"fixed top-0 left-0 w-full flex justify-between items-center px-5 py-4 z-10\">\r\n        {/* 语言选择下拉菜单 */}\r\n        <div>\r\n          <Dropdown menu={{ items }} placement=\"bottomLeft\">\r\n            <div className=\"px-4 py-2 backdrop-blur-md bg-white/20 text-white rounded-full cursor-pointer shadow-sm\">\r\n              Language 🌐\r\n            </div>\r\n          </Dropdown>\r\n        </div>\r\n\r\n        {/* 设置按钮 */}  \r\n        <div \r\n          onClick={() => setDrawerOpen(true)} \r\n          className=\"px-4 py-2 backdrop-blur-md bg-white/20 text-white rounded-full cursor-pointer shadow-sm\"\r\n        >\r\n          <span>⚙️</span>\r\n        </div>\r\n      </div>\r\n\r\n      {/* 页面内容部分 */}\r\n      <div\r\n        style={{ display: \"flex\", transform: `translateX(-${currentPage * 100}vw)`, transition: \"transform 0.5s ease\", width: `${pages.length * 100}vw`, }} \r\n      >\r\n        {pages.map((page) => (\r\n          <div key={page.id} className=\"min-h-screen w-screen\">\r\n            {page.content}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <Drawer\r\n        placement=\"bottom\"\r\n        open={drawerOpen}\r\n        onClose={() => setDrawerOpen(false)}\r\n        height={300}\r\n        closeIcon={false}\r\n        maskClosable={true}\r\n        styles={{\r\n          body: {\r\n            padding: '16px',\r\n            backgroundColor: 'rgba(255, 255, 255, 0.2)',\r\n            backdropFilter: 'blur(10px)',\r\n          },\r\n          content: {\r\n            backgroundColor: 'rgba(255, 255, 255, 0.2)',\r\n            backdropFilter: 'blur(10px)',\r\n          },\r\n          wrapper: {\r\n            backgroundColor: 'rgba(255, 255, 255, 0.1)',\r\n          }\r\n        }}\r\n      >\r\n        <h3 className=\"text-lg font-semibold\">Login</h3>\r\n        <p>Your may input your openai api later (dev)</p>\r\n      </Drawer>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FullPageSlider;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1150, "column": 0}, "map": {"version":3,"sources":["file://D%3A/BlabIt/front_end/next_app/app/page.tsx"],"sourcesContent":["\"use client\"\n\nimport FullPageSlider from \"../components/full_page_slider\";\n\nexport default function Home() {\n\n  return (\n    <FullPageSlider />\n  );\n}"],"names":[],"mappings":";;;;AAEA;AAFA;;;AAIe,SAAS;IAEtB,qBACE,8OAAC,+HAAA,CAAA,UAAc;;;;;AAEnB","debugId":null}}]
}