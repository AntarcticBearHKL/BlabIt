{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://D%3A/BlabIt/front_end/next_app/store/slices/speechSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\ninterface SpeechState {\r\n  speechText: string;  // 定义语音文本的类型\r\n}\r\n\r\nconst initialState: SpeechState = {\r\n  speechText: 'None',  // 初始状态为空字符串\r\n};\r\n\r\nexport const speechSlice = createSlice({\r\n  name: 'speech',  // slice 的名称\r\n  initialState,    // 初始状态\r\n  reducers: {\r\n    // 定义更新文本的 action\r\n    setSpeechText: (state, action: PayloadAction<string>) => {\r\n      state.speechText = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setSpeechText } = speechSlice.actions;"],"names":[],"mappings":";;;;AAAA;;AAMA,MAAM,eAA4B;IAChC,YAAY;AACd;AAEO,MAAM,cAAc,CAAA,GAAA,8LAAA,CAAA,cAAW,AAAD,EAAE;IACrC,MAAM;IACN;IACA,UAAU;QACR,iBAAiB;QACjB,eAAe,CAAC,OAAO;YACrB,MAAM,UAAU,GAAG,OAAO,OAAO;QACnC;IACF;AACF;AAEO,MAAM,EAAE,aAAa,EAAE,GAAG,YAAY,OAAO","debugId":null}},
    {"offset": {"line": 36, "column": 0}, "map": {"version":3,"sources":["file://D%3A/BlabIt/front_end/next_app/store/index.ts"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\r\nimport { speechSlice } from './slices/speechSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    speech: speechSlice.reducer,  // 注册 speech reducer\r\n  },\r\n});\r\n\r\n// 导出类型定义，用于 TypeScript 类型检查\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,QAAQ,CAAA,GAAA,8LAAA,CAAA,iBAAc,AAAD,EAAE;IAClC,SAAS;QACP,QAAQ,iIAAA,CAAA,cAAW,CAAC,OAAO;IAC7B;AACF","debugId":null}},
    {"offset": {"line": 57, "column": 0}, "map": {"version":3,"sources":["file://D%3A/BlabIt/front_end/next_app/store/provider.tsx"],"sourcesContent":["'use client';  // 声明这是客户端组件\r\n\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './index';\r\n\r\nexport function ReduxProvider({ children }: { children: React.ReactNode }) {\r\n  return <Provider store={store}>{children}</Provider>;\r\n}"],"names":[],"mappings":";;;;AAEA;AACA;AAHA,cAAe,YAAY;;;;AAKpB,SAAS,cAAc,EAAE,QAAQ,EAAiC;IACvE,qBAAO,6LAAC,4JAAA,CAAA,WAAQ;QAAC,OAAO,iHAAA,CAAA,QAAK;kBAAG;;;;;;AAClC;KAFgB","debugId":null}}]
}